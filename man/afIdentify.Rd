% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/afRemover.R
\name{afIdentify}
\alias{afIdentify}
\title{Classifies ROIs as autofuorescent and non-autofluorescent based on the measurements obtained by afMeasure.}
\usage{
afIdentify(mask, df, minSize = 100, maxSize = Inf, corr = -1,
  kAuto = FALSE, k = 1)
}
\arguments{
\item{mask}{A matrix of 0's and 1's describing the mask of the ROIs}

\item{df}{A data frame generated by afMeasure.}

\item{minSize}{The minimum ROI size (pixel area) to classify - should be greater than 1.}

\item{maxSize}{The maximum ROI size (pixel area) to classify.}

\item{corr}{A correlation cut-off for autofluorescence; all objects above this cut-off within the identified autofluorescence cluster is classified as auofluorescence.}

\item{kAuto}{Logical to estimate the number of clusters between 3 and a user provided number of clusters defined by 'k'; if TRUE, will perform this estimate.}

\item{k}{If 'kAuto' = FALSE: number of clusters used when performing k-means; if 'kAuto' = TRUE : maximum number of clusters for estimating an optimal k.}
}
\value{
A matrix containing a mask of all autofluorescent objects.
}
\description{
Classifies ROIs as autofuorescent and non-autofluorescent based on the measurements obtained by afMeasure.
}
\examples{
## Read in images.
imageFile1 = system.file("extdata","image1.tif", package = "AFremover")
imageFile2 = system.file("extdata","image2.tif", package = "AFremover")
im1 <- EBImage::readImage(imageFile1)
im2 <- EBImage::readImage(imageFile2)

## Transform the image.
im1 = im1/max(im1)
im2 = im2/max(im2)

combined <- EBImage::rgbImage(green=im1, red=im2)
EBImage::display(combined, all = TRUE, method = 'raster')


## Create masks using EBImage.

# Find tissue area
tissue1 = im1 > 2*min(im1)
tissue2 = im2 > 2*min(im2)

# Calculate thresholds
imThreshold1 <- mean(im1[tissue1]) + 2*sd(im1[tissue1])
imThreshold2 <- mean(im2[tissue2]) + 2*sd(im2[tissue2])

# Calculate masks.
mask1 <- EBImage::bwlabel(im1 > imThreshold1)
mask2 <- EBImage::bwlabel(im2 > imThreshold2)

# Calculate intersection mask
mask <- EBImage::bwlabel(mask1>0&mask2>0)

## Calculate textural features.
df <- afMeasure(im1, im2, mask)

## Alternatively
## Correlation only
# afMask <- afIdentify(mask, df, minSize = 100, maxSize = Inf, corr = 0.6)

## Clustering with given k
# afMask <- afIdentify(mask, df, minSize = 100, maxSize = Inf, k = 6)

## Clustering with estimated k.
afMask <- afIdentify(mask, df, minSize = 100, maxSize = Inf, k = 20, kAuto = TRUE)


## Remove autofluorescence from images
im1AFRemoved <- im1
im2AFRemoved <- im2
im1AFRemoved[afMask != 0] <- mean(im2)
im2AFRemoved[afMask != 0] <- mean(im2)

combinedRemoved <- EBImage::rgbImage(green = im1AFRemoved, red = im2AFRemoved)
EBImage::display(combinedRemoved, all = TRUE, method = 'raster')

##Or
##Exclude AF ROIs

exclude1 = unique(mask1[afMask>0])
mask1Removed = mask1
mask1Removed[mask1Removed==exclude1] = 0
exclude2 = unique(mask2[afMask>0])
mask2Removed = mask2
mask2Removed[mask2Removed==exclude2] = 0
}
